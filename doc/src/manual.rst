.. raw:: html

   <!--

   ============================================================================

      DO NOT EDIT THIS FILE! It was generated using Sphinx from:

      Origin:   $URL$
      Revision: $Rev$

   ============================================================================

   -->

.. title:: GLISTR Manual

.. meta::
    :description: Introducing the main command-line tool for GLISTR.
    :keywords: GLISTR Manual, GLISTR Tools, GLISTR Commands, GLISTR How-to, GLISTR Help.

    
.. raw:: latex

    \pagebreak

.. role:: red
.. role:: blue

    
.. raw:: html

    <br />

.. _CommandLineTools:
    
======
Manual
======

.. raw:: html

    <br />

.. only:: html
    
    :red:`The PDF file including this manual can be downloaded here:` :download:`GLISTR_Software_Manual.pdf <GLISTR_Software_Manual.pdf>`.

    .. raw:: html

        <br />

GLISTR Command and Parameters
=============================

.. raw:: html

    <br />
	
The main command of GLISTR which segments the subject scan and registers the atlas to the subject scan is named ``GLISTR``. The simplest use is: ::

  GLISTR  --featureslist <list_file>  --seed_info <seed_file>  --point_info <point_file>   
          --atlas_folder <atlas_folder>  --outputdir <output_folder> 

         
The parameters used above are **mandatory**. For image format, NIfTI-1_ (``*.nii`` or ``*.nii.gz``) format is required. For memory requirements, it depends on the size of the atlas and the number of thread used. For the eve atlas with using single thread, 12GB memory is recommended. For 3 threads in same configuration, 15GB memory is recommended. The absolute path is required for each path in the parameter. The meaning of each parameter is: ::
  
  --featureslist, -fl <file>    Text file listing the patient scans, one per line.
                                It is recommended to use T1, T1-CE, T2, and FLAIR patient
                                scans as input.
                                
  --seed_info, -si <file>       Tumor seed information. This option overrides -x, -y, -z,
                                and -T. The format of this file is:
                                
                                    <n: number of seeds>
                                    <x1> <y1> <z1> <r1>
                                    ...
                                    <xn> <yn> <zn> <rn>
                                    
                                where <xi> <yi> <zi> is the RAS coordinate of ith seed and
                                <di> is the approximated diameter of ith tumor.
                                
  --point_info, -pi <file>      One sample point for each class. This option overrides -im.
                                The format of this file is:
                                
                                    <Class 1>
                                    <x1> <y1> <z1>
                                    ...
                                    <Class n>
                                    <xn> <yn> <zn>
                                    
                                where <Class i> is the name of ith tissue class and
                                <xi> <yi> <zi> is the RAS coordinate of ith tissue class.
                                
  --atlas_folder, -af <dir>     The directory path for the atlas.
  --outputdir, -d <dir>         The directory path for output files.

Each parameter can be specified as a long name starting with ``--`` or a short name starting with ``-``. For tumor seed information, users can specify the number of seed points up to 10. For example, if there're two tumor masses in the scan, the tumor seed file contains: ::

  2
  x1 y1 z1 d1
  x2 y2 z2 d2
  
where <xi> <yi> <zi> is the RAS coordinate of ith center of the tumor mass and <di> is its approximated diameter.

For each tissue class, the label index and value are defined as follows:

+-------+---------------------+-------+--------+
| Label | Description         | Index | Value  |
+=======+=====================+=======+========+
| BG    | Background          | 0     | 0      |
+-------+---------------------+-------+--------+
| CSF   | Cerebrospinal Fluid | 1     | 10     |
+-------+---------------------+-------+--------+
| GM    | Gray Matter         | 2     | 150    |
+-------+---------------------+-------+--------+
| WM    | White Matter        | 3     | 250    |
+-------+---------------------+-------+--------+
| VS    | Vessel              | 4     | 25     |
+-------+---------------------+-------+--------+
| ED    | Edema               | 5     | 100    |
+-------+---------------------+-------+--------+
| NCR   | Necrosis            | 6     | 175    |
+-------+---------------------+-------+--------+
| TU    | Enhancing Tumor     | 7     | 200    |
+-------+---------------------+-------+--------+
| NE    | Non-Enhancing Tumor | 8     | 185    |
+-------+---------------------+-------+--------+
| CB    | Cerebellum          | 9     | 5      |
+-------+---------------------+-------+--------+

The NE label is optional and it is not segmented if not specified in the point file. The point file contains the location of one sample point for each tissue class. The typical point file contains: ::

  CSF
  x1 y1 z1
  GM
  x2 y2 z2
  WM
  x3 y3 z3
  VS
  x4 y4 z4
  ED
  x5 y5 z5
  NCR
  x6 y6 z6
  TU
  x7 y7 z7
  CB
  x9 y9 z9

where <xi> <yi> <zi> is the RAS coordinate of one sample point for ith tissue class. The point for BG doesn't need to be specified.
  
The following parameters are **optional**: ::

  --workingdir, -w <dir>            The directory path for intermediate files.
  --atlas_template, -at <file>      The atlas template file.
  --atlas_prior, -ap <file>         The list file for atlas priors.
  --atlas_label, -al <file>         The atlas label map (.nii.gz).
  --atlas_label_img, -ali <file>    The atlas label map (.img).
  --num_omp_threads, -not <int>     The number of OpemMP threads.
  --num_itk_threads, -nit <int>     The number of ITK threads.
  --num_hop_threads, -nht <int>     The number of HOPSPACK threads.
  --verbose, -v <int>               if greater than 0, print log messages: 
                                    1 (default), 2 (detailed).

The atlas related parameters (``--atlas_template``, ``--atlas_prior``, ``--atlas_label``, and ``--atlas_label_img``) are required to be specified all together and they are effective only when ``--atlas_folder`` is not specified. The following parameters are used in the previous version, however they became **obsolete** in this version: ::

  --xc, -x <float>              Initial tumor center in sagital direction.
  --yc, -y <float>              Initial tumor center in coronal direction.
  --zc, -z <float>              Initial tumor center in axial direction.
  --growthtime, -T <int>        Initial tumor growth length. Should be larger than 25.
                                For huge tumors, set it to about 120.
  --initialmeans, -im <file>    Text file specifying the initial mean values for
                                the different classes.         

                                
.. raw:: html

    <br />

Output of GLISTR
================

.. raw:: html

    <br />
    
The following output files are generated by GLISTR in the ``<output_folder>`` specified by the ``--outputdir`` or ``-d`` parameter: ::

  scan_label_map.nii.gz     Obtained segmentation label map.
  scan_to_atlas.mat         Affine matrix mapping the patient scan to the atals.
  atlas_to_scan.mat         Inverse matrix of scan_to_atlas.mat.
  scan_u_h_field.*          Deformation field mapping affine transformed patient scan
                            to atlas.
  tumor_params.txt          Obtained tumor parameters.
  scan_means.txt            Obtained mean value for each tissue class.
  scan_variances.txt        Obtained variance value for each tissue class.
  scan_posterior*           Obtained posterior map for each tissue class.
  scan_prior*               Obtained prior map for each tissue class.
  scan_init_menas.txt       Initial mean value for each tissue class.
  log.txt                   Log file.

To map an image in the atals space to the patient space, warp the image using ``scan_u_h_field.mhd`` first and then apply affine transform using ``atlas_to_scan.mat``. ``scan_posterior*`` and ``scan_prior*`` for each tissue class are appended with the label index defined in the above table. Also, the label value of each class used in ``scan_label_map.nii.gz`` is defined above.


.. raw:: html

    <br />
    
Making Initializations Using BrainTumorViewer
=============================================

.. raw:: html

    <br />

Using BrainTumorViewer_, making initial tumor seeds and tissue points could be easily done. Assuming co-registered scans for brain tumor MRI are given, open all modalities using ``File > Open Image(s)`` menu or drag and drop images to the viewer. Users can navigate each modality and roughly figure out the location of the tumor and the edema. In the ``Tumor`` tab as shown in `Figure 4`_, select ``GLISTR`` in ``Type of Initializations``. To add a point for tumor seed, click one item in the ``Tumor Seed Points`` list and then click (move cross hair to) an approximate center of each tumor mass and push ``< space >``. To add a radius for this mass, click its approximate boundary and push ``< shift > + < space >``. After completing, the list can be saved using the Save button. In the ``Tissue Points`` list, each row represents one sample location for the corresponding tissue type. To add a point, select one tissue type and then click one sample location of that tissue on the view and push ``< space >``.

    
.. _`Figure 4`:

.. only:: html

    .. figure::   btv_example.jpg
       :alt:      BrainTumorViewer screen.
       :align:    center
       :width:    650px
       :figwidth: 100%
       
       Figure 4: An example screenshot of BrainTumorViewer_.

.. only:: latex

    .. figure::   btv_example.jpg
       :alt:      BrainTumorViewer screen.
       :align:    center
       :width:    75%
       :figwidth: 100%
       
       An example screenshot of BrainTumorViewer_.
    

.. raw:: html

    <br />
    
Auxiliary Commands
==================

.. raw:: html

    <br />

+----------------------------+---------------------------------------------------+
| Command                    | Operation                                         |
+============================+===================================================+
| |WarpImage|                | Warp image                                        |
+----------------------------+---------------------------------------------------+
| |NormalizeImage|           | Normalize image                                   |
+----------------------------+---------------------------------------------------+
| |ResampleImage|            | Resample image                                    |
+----------------------------+---------------------------------------------------+
| |ConcatenateFields|        | Concatenate two deformation fields                |
+----------------------------+---------------------------------------------------+
| |ResampleDeformationField| | Resample deformation field                        |
+----------------------------+---------------------------------------------------+
| |ReverseDeformationField|  | Reverse deformation field                         |
+----------------------------+---------------------------------------------------+
| `EvaluateQ`                | Computing the cost function                       |
+----------------------------+---------------------------------------------------+

.. raw:: html

    <br />
 
``EvaluateQ`` is the internal procedure and called only by ``GLISTR``.
 
.. |WarpImage|                  replace:: :doc:`WarpImage{NN}               <tools/WarpImage>`
.. |NormalizeImage|             replace:: :doc:`NormalizeImage              <tools/NormalizeImage>`
.. |ResampleImage|              replace:: :doc:`ResampleImage               <tools/ResampleImage>`
.. |ConcatenateFields|          replace:: :doc:`ConcatenateFields           <tools/ConcatenateFields>`
.. |ResampleDeformationField|   replace:: :doc:`ResampleDeformationField    <tools/ResampleDeformationField>`
.. |ReverseDeformationField|    replace:: :doc:`ReverseDeformationField     <tools/ReverseDeformationField>`


.. raw:: html

    <br />

Running Example
===============

.. raw:: html

    <br />

If we assume ``$(install)`` is an installation directory of GLISTR, an example scans and its worked initializations are installed in ``$(install)/example/ex0``. The GLISTR for this example is performed by ::

  $(install)/bin/GLISTR  --featureslist $(install)/example/ex0/scan0.lst  
                         --seed_info $(install)/example/ex0/init_seed_glistr.txt  
                         --point_info $(install)/example/ex0/init_point_glistr_10a.txt
                         --atlas_folder $(install)/atlas_jakob_with_cere_type
                         --outputdir $(install)/example/ex0/mglistr

Then, output files are created in ``$(install)/example/ex0/mglistr``. To check the intermediate results of the procedure specify the working directory by appending ``--workingdir $(install)/example/ex0/mglistr/tmp``. For ``--atals_folder``, ``$(install)/`` is automatically prepended when users specify the last directory name only (e.g. ``atlas_jakob_with_cere_type`` in this example). To check more detailed output messages, append ``--verbose 2``. To execute GLISTR using ``N`` cores in the system, append ``--num_omp_threads N``, ``--num_itk_threads N``, and ``--num_hop_threads N``. The running time of this example is about 2 hours using 3 cores on an Intel Core i7 3.4 GHz machine with Windows operating system having 32GB memory.

.. note::

    Before running GLISTR, confirm ``flirt``, ``convert_xfm`` of FSL_, ``HOPSPACK_main_threaded`` of HOPSPACK_, and ``ForwardSolverDiffusion`` of BrainTumorModeling_CoupledSolver_ could be found in the path or located in ``$(install)/bin`` folder. If not, check :ref:`RuntimeRequirements` again.


.. raw:: html

    <br />

    
.. toctree::
    :hidden:

    tools/WarpImage
    tools/NormalizeImage
    tools/ResampleImage
    tools/ConcatenateFields
    tools/ResampleDeformationField
    tools/ReverseDeformationField


.. _NIfTI-1: http://nifti.nimh.nih.gov/nifti-1/
.. _BrainTumorViewer: http://www.cbica.upenn.edu/sbia/software/braintumorviewer/
.. _FSL:        http://fsl.fmrib.ox.ac.uk
.. _HOPSPACK:   http://software.sandia.gov/trac/hopspack/
.. _BrainTumorModeling_CoupledSolver: http://www.cbica.upenn.edu/sbia/software/tumorsimulator/
